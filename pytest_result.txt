============================= test session starts =============================
platform win32 -- Python 3.9.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- C:\Dev\api_final_yatube\venv\Scripts\python.exe
django: settings: yatube_api.settings (from ini)
rootdir: C:\Dev\api_final_yatube, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 55 items

tests/test_comment.py::TestCommentAPI::test_comments_not_authenticated FAILED [  1%]
tests/test_comment.py::TestCommentAPI::test_comment_single_not_authenticated FAILED [  3%]
tests/test_comment.py::TestCommentAPI::test_comments_not_found FAILED    [  5%]
tests/test_comment.py::TestCommentAPI::test_comments_id_available FAILED [  7%]
tests/test_comment.py::TestCommentAPI::test_comments_get FAILED          [  9%]
tests/test_comment.py::TestCommentAPI::test_comment_create_by_unauth FAILED [ 10%]
tests/test_comment.py::TestCommentAPI::test_comments_post_auth_with_valid_data FAILED [ 12%]
tests/test_comment.py::TestCommentAPI::test_comments_auth_post_with_invalid_data FAILED [ 14%]
tests/test_comment.py::TestCommentAPI::test_comment_author_and_post_are_read_only FAILED [ 16%]
tests/test_comment.py::TestCommentAPI::test_comment_id_auth_get FAILED   [ 18%]
tests/test_comment.py::TestCommentAPI::test_comment_change_by_auth_with_valid_data[put] FAILED [ 20%]
tests/test_comment.py::TestCommentAPI::test_comment_change_by_auth_with_valid_data[patch] FAILED [ 21%]
tests/test_comment.py::TestCommentAPI::test_comment_change_not_auth_with_valid_data[put] FAILED [ 23%]
tests/test_comment.py::TestCommentAPI::test_comment_change_not_auth_with_valid_data[patch] FAILED [ 25%]
tests/test_comment.py::TestCommentAPI::test_comment_delete_by_author FAILED [ 27%]
tests/test_comment.py::TestCommentAPI::test_comment_delete_by_not_author FAILED [ 29%]
tests/test_comment.py::TestCommentAPI::test_comment_delete_by_unauth FAILED [ 30%]
tests/test_follow.py::TestFollowAPI::test_follow_not_found FAILED        [ 32%]
tests/test_follow.py::TestFollowAPI::test_follow_not_auth FAILED         [ 34%]
tests/test_follow.py::TestFollowAPI::test_follow_get FAILED              [ 36%]
tests/test_follow.py::TestFollowAPI::test_follow_create FAILED           [ 38%]
tests/test_follow.py::TestFollowAPI::test_follow_search_filter FAILED    [ 40%]
tests/test_group.py::TestGroupAPI::test_group_not_found PASSED           [ 41%]
tests/test_group.py::TestGroupAPI::test_group_list_not_auth PASSED       [ 43%]
tests/test_group.py::TestGroupAPI::test_group_page_not_found PASSED      [ 45%]
tests/test_group.py::TestGroupAPI::test_group_single_not_auth PASSED     [ 47%]
tests/test_group.py::TestGroupAPI::test_group_auth_get PASSED            [ 49%]
tests/test_group.py::TestGroupAPI::test_group_create PASSED              [ 50%]
tests/test_group.py::TestGroupAPI::test_group_page_auth_get PASSED       [ 52%]
tests/test_jwt.py::TestJWT::test_jwt_create__invalid_request_data PASSED [ 54%]
tests/test_jwt.py::TestJWT::test_jwt_create__valid_request_data PASSED   [ 56%]
tests/test_jwt.py::TestJWT::test_jwt_refresh__invalid_request_data PASSED [ 58%]
tests/test_jwt.py::TestJWT::test_jwt_refresh__valid_request_data PASSED  [ 60%]
tests/test_jwt.py::TestJWT::test_jwt_verify__invalid_request_data PASSED [ 61%]
tests/test_jwt.py::TestJWT::test_jwt_verify__valid_request_data PASSED   [ 63%]
tests/test_post.py::TestPostAPI::test_post_not_found PASSED              [ 65%]
tests/test_post.py::TestPostAPI::test_post_list_not_auth PASSED          [ 67%]
tests/test_post.py::TestPostAPI::test_post_single_not_auth PASSED        [ 69%]
tests/test_post.py::TestPostAPI::test_posts_auth_get FAILED              [ 70%]
tests/test_post.py::TestPostAPI::test_posts_get_paginated PASSED         [ 72%]
tests/test_post.py::TestPostAPI::test_post_create_auth_with_invalid_data PASSED [ 74%]
tests/test_post.py::TestPostAPI::test_post_create_auth_with_valid_data PASSED [ 76%]
tests/test_post.py::TestPostAPI::test_post_unauth_create PASSED          [ 78%]
tests/test_post.py::TestPostAPI::test_post_get_current PASSED            [ 80%]
tests/test_post.py::TestPostAPI::test_post_change_auth_with_valid_data[put] PASSED [ 81%]
tests/test_post.py::TestPostAPI::test_post_change_auth_with_valid_data[patch] PASSED [ 83%]
tests/test_post.py::TestPostAPI::test_post_change_not_auth_with_valid_data[put] PASSED [ 85%]
tests/test_post.py::TestPostAPI::test_post_change_not_auth_with_valid_data[patch] PASSED [ 87%]
tests/test_post.py::TestPostAPI::test_post_change_not_author_with_valid_data[put] PASSED [ 89%]
tests/test_post.py::TestPostAPI::test_post_change_not_author_with_valid_data[patch] PASSED [ 90%]
tests/test_post.py::TestPostAPI::test_post_patch_auth_with_invalid_data[put] PASSED [ 92%]
tests/test_post.py::TestPostAPI::test_post_patch_auth_with_invalid_data[patch] PASSED [ 94%]
tests/test_post.py::TestPostAPI::test_post_delete_by_author PASSED       [ 96%]
tests/test_post.py::TestPostAPI::test_post_delete_not_author PASSED      [ 98%]
tests/test_post.py::TestPostAPI::test_post_unauth_delete_current PASSED  [100%]

================================== FAILURES ===================================
_______________ TestCommentAPI.test_comments_not_authenticated ________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320E5E3FA0>
client = <django.test.client.Client object at 0x000002320E763BE0>
post = <Post: Тестовый пост 1>

    def test_comments_not_authenticated(self, client, post):
        response = client.get(
            self.comments_url.format(post_id=post.id)
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос неавторизованного пользователя к '
            f'`{self.comments_url}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос неавторизованного пользователя к `/api/v1/posts/{post_id}/comments/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:46: AssertionError
---------------------------- Captured stdout setup ----------------------------
Operations to perform:
  Synchronize unmigrated apps: api, djoser, messages, rest_framework, staticfiles
  Apply all migrations: admin, auth, contenttypes, posts, sessions
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying posts.0001_initial... OK
  Applying posts.0002_auto_20231111_1836... OK
  Applying posts.0003_post_group... OK
  Applying sessions.0001_initial... OK
---------------------------- Captured stderr setup ----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/1/comments/
____________ TestCommentAPI.test_comment_single_not_authenticated _____________

self = <tests.test_comment.TestCommentAPI object at 0x000002320EEB4100>
client = <django.test.client.Client object at 0x000002320EEB4820>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (1)>

    def test_comment_single_not_authenticated(self, client, post,
                                              comment_1_post):
        response = client.get(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            )
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос неавторизованного пользователя к '
            f'`{self.comment_detail_url}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос неавторизованного пользователя к `/api/v1/posts/{post_id}/comments/{comment_id}/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:58: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/2/comments/1/
___________________ TestCommentAPI.test_comments_not_found ____________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320EEB4700>
user_client = <rest_framework.test.APIClient object at 0x000002320EEBED60>
post = <Post: Тестовый пост 1>

    def test_comments_not_found(self, user_client, post):
        response = user_client.get(
            self.comments_url.format(post_id=post.id)
        )
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.comments_url}` не найден, проверьте настройки в '
            '*urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/posts/{post_id}/comments/` не найден, проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_comment.py:67: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/3/comments/
__________________ TestCommentAPI.test_comments_id_available __________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F024190>
user_client = <rest_framework.test.APIClient object at 0x000002320F0240D0>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (2)>

    def test_comments_id_available(self, user_client, post, comment_1_post):
        response = user_client.get(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            )
        )
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.comment_detail_url}` не найден, проверьте '
            'настройки в *urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/posts/{post_id}/comments/{comment_id}/` не найден, проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_comment.py:78: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/4/comments/2/
______________________ TestCommentAPI.test_comments_get _______________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F024430>
user_client = <rest_framework.test.APIClient object at 0x000002320F026820>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (3)>
comment_2_post = <Comment: Comment object (4)>
comment_1_another_post = <Comment: Comment object (5)>

    def test_comments_get(self, user_client, post, comment_1_post,
                          comment_2_post, comment_1_another_post):
        response = user_client.get(
            self.comments_url.format(post_id=post.id)
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что при GET-запросе авторизованного пользователя к '
            f'`{self.comments_url}` возвращается ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что при GET-запросе авторизованного пользователя к `/api/v1/posts/{post_id}/comments/` возвращается ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:88: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/5/comments/
________________ TestCommentAPI.test_comment_create_by_unauth _________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320EEBE2B0>
client = <django.test.client.Client object at 0x000002320F00DA00>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (6)>

    def test_comment_create_by_unauth(self, client, post, comment_1_post):
        comment_cnt = Comment.objects.count()
    
        assert_msg = (
            'Проверьте, что для неавторизованного пользователя POST-запрос '
            f'к `{self.comments_url}` возвращает ответ со статусом 401.'
        )
        data = {'text': self.TEXT_FOR_COMMENT}
        try:
            response = client.post(
                self.comments_url.format(post_id=post.id),
                data=data
            )
        except ValueError as error:
            raise AssertionError(
                assert_msg + (
                    '\nВ процессе выполнения запроса произошла ошибка: '
                    f'{error}'
                )
            )
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, assert_msg
E       AssertionError: Проверьте, что для неавторизованного пользователя POST-запрос к `/api/v1/posts/{post_id}/comments/` возвращает ответ со статусом 401.
E       assert 404 == <HTTPStatus.UNAUTHORIZED: 401>
E         +404
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests\test_comment.py:131: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/7/comments/
___________ TestCommentAPI.test_comments_post_auth_with_valid_data ____________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F0266A0>
user_client = <rest_framework.test.APIClient object at 0x000002320F0A6610>
post = <Post: Тестовый пост 1>, user = <User: TestUser>
another_user = <User: TestUserAnother>

    def test_comments_post_auth_with_valid_data(self, user_client, post,
                                                user, another_user):
        comments_count = Comment.objects.count()
    
        assert_msg = (
            'Проверьте, что POST-запрос с корректными данными от '
            f'авторизованного пользователя к `{self.comments_url}` возвращает '
            'ответ со статусом 201.'
        )
        data = {'text': self.TEXT_FOR_COMMENT}
        try:
            response = user_client.post(
                self.comments_url.format(post_id=post.id),
                data=data
            )
        except IntegrityError as error:
            raise AssertionError(
                assert_msg + (
                    f' В процессе выполнения запроса произошла ошибка: {error}'
                )
            )
>       assert response.status_code == HTTPStatus.CREATED, assert_msg
E       AssertionError: Проверьте, что POST-запрос с корректными данными от авторизованного пользователя к `/api/v1/posts/{post_id}/comments/` возвращает ответ со статусом 201.
E       assert 404 == <HTTPStatus.CREATED: 201>
E         +404
E         -<HTTPStatus.CREATED: 201>

tests\test_comment.py:159: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/8/comments/
__________ TestCommentAPI.test_comments_auth_post_with_invalid_data ___________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F0A6040>
user_client = <rest_framework.test.APIClient object at 0x000002320F093100>
post = <Post: Тестовый пост 1>

    def test_comments_auth_post_with_invalid_data(self, user_client, post):
        comments_count = Comment.objects.count()
    
        response = user_client.post(
            self.comments_url.format(post_id=post.id),
            data={}
        )
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос с некорректными данными от '
            f'авторизованного пользователя к `{self.comments_url}` возвращает '
            'ответ со статусом 400.'
        )
E       AssertionError: Проверьте, что POST-запрос с некорректными данными от авторизованного пользователя к `/api/v1/posts/{post_id}/comments/` возвращает ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_comment.py:194: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/9/comments/
__________ TestCommentAPI.test_comment_author_and_post_are_read_only __________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F093AF0>
user_client = <rest_framework.test.APIClient object at 0x000002320F026C70>
post = <Post: Тестовый пост 1>

    def test_comment_author_and_post_are_read_only(self, user_client, post):
        response = user_client.post(
            self.comments_url.format(post_id=post.id),
            data={}
        )
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос с некорректными данными от '
            f'авторизованного пользователя к `{self.comments_url}` возвращает '
            'ответ со статусом 400.'
        )
E       AssertionError: Проверьте, что POST-запрос с некорректными данными от авторизованного пользователя к `/api/v1/posts/{post_id}/comments/` возвращает ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_comment.py:209: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/10/comments/
___________________ TestCommentAPI.test_comment_id_auth_get ___________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F026130>
user_client = <rest_framework.test.APIClient object at 0x000002320F0AAB20>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (7)>
user = <User: TestUser>

    def test_comment_id_auth_get(self, user_client, post,
                                 comment_1_post, user):
        response = user_client.get(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            )
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'`{self.comment_detail_url}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос авторизованного пользователя к `/api/v1/posts/{post_id}/comments/{comment_id}/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:227: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/11/comments/7/
_______ TestCommentAPI.test_comment_change_by_auth_with_valid_data[put] _______

self = <tests.test_comment.TestCommentAPI object at 0x000002320F09AB80>
user_client = <rest_framework.test.APIClient object at 0x000002320F092C40>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (8)>
comment_2_post = <Comment: Comment object (9)>, http_method = 'PUT'

    @pytest.mark.parametrize('http_method', ('put', 'patch'))
    def test_comment_change_by_auth_with_valid_data(self,
                                                    user_client,
                                                    post,
                                                    comment_1_post,
                                                    comment_2_post,
                                                    http_method):
        request_func = getattr(user_client, http_method)
        response = request_func(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            ),
            data={'text': self.TEXT_FOR_COMMENT}
        )
        http_method = http_method.upper()
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что {http_method}-запрос, отправленный '
            'авторизованным пользователем на эндпоинт '
            f'`{self.comment_detail_url}` к собственному комментарию, '
            'возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что PUT-запрос, отправленный авторизованным пользователем на эндпоинт `/api/v1/posts/{post_id}/comments/{comment_id}/` к собственному комментарию, возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:264: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/12/comments/8/
______ TestCommentAPI.test_comment_change_by_auth_with_valid_data[patch] ______

self = <tests.test_comment.TestCommentAPI object at 0x000002320F092310>
user_client = <rest_framework.test.APIClient object at 0x000002320F07DA60>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (10)>
comment_2_post = <Comment: Comment object (11)>, http_method = 'PATCH'

    @pytest.mark.parametrize('http_method', ('put', 'patch'))
    def test_comment_change_by_auth_with_valid_data(self,
                                                    user_client,
                                                    post,
                                                    comment_1_post,
                                                    comment_2_post,
                                                    http_method):
        request_func = getattr(user_client, http_method)
        response = request_func(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            ),
            data={'text': self.TEXT_FOR_COMMENT}
        )
        http_method = http_method.upper()
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что {http_method}-запрос, отправленный '
            'авторизованным пользователем на эндпоинт '
            f'`{self.comment_detail_url}` к собственному комментарию, '
            'возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что PATCH-запрос, отправленный авторизованным пользователем на эндпоинт `/api/v1/posts/{post_id}/comments/{comment_id}/` к собственному комментарию, возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_comment.py:264: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/13/comments/10/
______ TestCommentAPI.test_comment_change_not_auth_with_valid_data[put] _______

self = <tests.test_comment.TestCommentAPI object at 0x000002320F093B80>
client = <django.test.client.Client object at 0x000002320F0A2A30>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (12)>
http_method = 'PUT'

    @pytest.mark.parametrize('http_method', ('put', 'patch'))
    def test_comment_change_not_auth_with_valid_data(self,
                                                     client,
                                                     post,
                                                     comment_1_post,
                                                     http_method):
        request_func = getattr(client, http_method)
        response = request_func(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            ),
            data={'text': self.TEXT_FOR_COMMENT}
        )
        http_method = http_method.upper()
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            f'Проверьте, что для неавторизованного пользователя {http_method}'
            f'-запрос к `{self.comment_detail_url}` возвращает ответ со '
            'статусом 401.'
        )
E       AssertionError: Проверьте, что для неавторизованного пользователя PUT-запрос к `/api/v1/posts/{post_id}/comments/{comment_id}/` возвращает ответ со статусом 401.
E       assert 404 == <HTTPStatus.UNAUTHORIZED: 401>
E         +404
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests\test_comment.py:307: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/14/comments/12/
_____ TestCommentAPI.test_comment_change_not_auth_with_valid_data[patch] ______

self = <tests.test_comment.TestCommentAPI object at 0x000002320F07D520>
client = <django.test.client.Client object at 0x000002320F050D60>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (13)>
http_method = 'PATCH'

    @pytest.mark.parametrize('http_method', ('put', 'patch'))
    def test_comment_change_not_auth_with_valid_data(self,
                                                     client,
                                                     post,
                                                     comment_1_post,
                                                     http_method):
        request_func = getattr(client, http_method)
        response = request_func(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            ),
            data={'text': self.TEXT_FOR_COMMENT}
        )
        http_method = http_method.upper()
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            f'Проверьте, что для неавторизованного пользователя {http_method}'
            f'-запрос к `{self.comment_detail_url}` возвращает ответ со '
            'статусом 401.'
        )
E       AssertionError: Проверьте, что для неавторизованного пользователя PATCH-запрос к `/api/v1/posts/{post_id}/comments/{comment_id}/` возвращает ответ со статусом 401.
E       assert 404 == <HTTPStatus.UNAUTHORIZED: 401>
E         +404
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests\test_comment.py:307: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/15/comments/13/
________________ TestCommentAPI.test_comment_delete_by_author _________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F0436D0>
user_client = <rest_framework.test.APIClient object at 0x000002320F08EF40>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (14)>

    def test_comment_delete_by_author(self, user_client,
                                      post, comment_1_post):
        response = user_client.delete(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            )
        )
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            'Проверьте, что DELETE-запрос, отправленный авторизованным '
            'пользователем к собственному комментарию на эндпоинт '
            f'`{self.comment_detail_url}`, возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос, отправленный авторизованным пользователем к собственному комментарию на эндпоинт `/api/v1/posts/{post_id}/comments/{comment_id}/`, возвращает ответ со статусом 204.
E       assert 404 == <HTTPStatus.NO_CONTENT: 204>
E         +404
E         -<HTTPStatus.NO_CONTENT: 204>

tests\test_comment.py:326: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/16/comments/14/
______________ TestCommentAPI.test_comment_delete_by_not_author _______________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F043D00>
user_client = <rest_framework.test.APIClient object at 0x000002320F057FA0>
post = <Post: Тестовый пост 1>, comment_2_post = <Comment: Comment object (15)>

    def test_comment_delete_by_not_author(self, user_client,
                                          post, comment_2_post):
        response = user_client.delete(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_2_post.id
            )
        )
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            'Проверьте, что DELETE-запрос, отправленный авторизованным '
            'пользователем к чужому комментарию на эндпоинт '
            f'`{self.comment_detail_url}`, возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что DELETE-запрос, отправленный авторизованным пользователем к чужому комментарию на эндпоинт `/api/v1/posts/{post_id}/comments/{comment_id}/`, возвращает ответ со статусом 403.
E       assert 404 == <HTTPStatus.FORBIDDEN: 403>
E         +404
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_comment.py:345: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/17/comments/15/
________________ TestCommentAPI.test_comment_delete_by_unauth _________________

self = <tests.test_comment.TestCommentAPI object at 0x000002320F0507C0>
client = <django.test.client.Client object at 0x000002320F0437F0>
post = <Post: Тестовый пост 1>, comment_1_post = <Comment: Comment object (16)>

    def test_comment_delete_by_unauth(self, client, post, comment_1_post):
        response = client.delete(
            self.comment_detail_url.format(
                post_id=post.id, comment_id=comment_1_post.id
            )
        )
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            'Проверьте, что для неавторизованного пользователя DELETE-запрос '
            f'к `{self.comment_detail_url}` возвращает ответ со статусом 401.'
        )
E       AssertionError: Проверьте, что для неавторизованного пользователя DELETE-запрос к `/api/v1/posts/{post_id}/comments/{comment_id}/` возвращает ответ со статусом 401.
E       assert 404 == <HTTPStatus.UNAUTHORIZED: 401>
E         +404
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests\test_comment.py:363: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/posts/18/comments/16/
_____________________ TestFollowAPI.test_follow_not_found _____________________

self = <tests.test_follow.TestFollowAPI object at 0x000002320F043520>
user_client = <rest_framework.test.APIClient object at 0x000002320F053400>
follow_1 = <Follow: Follow object (1)>, follow_2 = <Follow: Follow object (2)>

    def test_follow_not_found(self, user_client, follow_1, follow_2):
        response = user_client.get(self.url)
    
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url}` не найден, проверьте настройки в '
            '*urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/follow/` не найден, проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_follow.py:17: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/follow/
_____________________ TestFollowAPI.test_follow_not_auth ______________________

self = <tests.test_follow.TestFollowAPI object at 0x000002320F053820>
client = <django.test.client.Client object at 0x000002320F0EB7F0>
follow_1 = <Follow: Follow object (3)>, follow_2 = <Follow: Follow object (4)>

    def test_follow_not_auth(self, client, follow_1, follow_2):
        assert_msg = (
            'Проверьте, что GET-запрос неавторизованного пользователя к '
            f'`{self.url}` возвращает ответ со статусом 401.'
        )
        try:
            response = client.get(self.url)
        except TypeError as error:
            raise AssertionError(
                assert_msg + (
                    f' В процессе выполнения запроса произошла ошибка: {error}'
                )
            )
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, assert_msg
E       AssertionError: Проверьте, что GET-запрос неавторизованного пользователя к `/api/v1/follow/` возвращает ответ со статусом 401.
E       assert 404 == <HTTPStatus.UNAUTHORIZED: 401>
E         +404
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests\test_follow.py:35: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/follow/
________________________ TestFollowAPI.test_follow_get ________________________

self = <tests.test_follow.TestFollowAPI object at 0x000002320F053370>
user_client = <rest_framework.test.APIClient object at 0x000002320F0D0AC0>
user = <User: TestUser>, follow_1 = <Follow: Follow object (5)>
follow_2 = <Follow: Follow object (6)>, follow_3 = <Follow: Follow object (7)>

    def test_follow_get(self, user_client, user, follow_1, follow_2, follow_3):
        response = user_client.get(self.url)
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'`{self.url}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос авторизованного пользователя к `/api/v1/follow/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_follow.py:46: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/follow/
______________________ TestFollowAPI.test_follow_create _______________________

self = <tests.test_follow.TestFollowAPI object at 0x000002320F0DFCA0>
user_client = <rest_framework.test.APIClient object at 0x000002320F0D5B20>
follow_2 = <Follow: Follow object (8)>, follow_3 = <Follow: Follow object (9)>
user = <User: TestUser>, user_2 = <User: TestUser2>
another_user = <User: TestUserAnother>

    def test_follow_create(self, user_client, follow_2, follow_3, user,
                           user_2, another_user):
        follow_count = Follow.objects.count()
    
        data = {}
        response = user_client.post(self.url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос с некорректными данными, '
            f'отправленный к `{self.url}`, возвращает ответ со статусом 400.'
        )
E       AssertionError: Проверьте, что POST-запрос с некорректными данными, отправленный к `/api/v1/follow/`, возвращает ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_follow.py:94: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/follow/
___________________ TestFollowAPI.test_follow_search_filter ___________________

self = <tests.test_follow.TestFollowAPI object at 0x000002320F10F190>
user_client = <rest_framework.test.APIClient object at 0x000002320F10FFA0>
follow_1 = <Follow: Follow object (10)>, follow_2 = <Follow: Follow object (11)>
follow_3 = <Follow: Follow object (12)>, follow_4 = <Follow: Follow object (13)>
follow_5 = <Follow: Follow object (14)>, user = <User: TestUser>
user_2 = <User: TestUser2>, another_user = <User: TestUserAnother>

    @pytest.mark.django_db(transaction=True)
    def test_follow_search_filter(self, user_client, follow_1, follow_2,
                                  follow_3, follow_4, follow_5,
                                  user, user_2, another_user):
    
        user_follows = Follow.objects.filter(user=user)
    
        response = user_client.get(self.url)
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url}` не найден, проверьте настройки в '
            '*urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/follow/` не найден, проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_follow.py:171: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/follow/
_______________________ TestPostAPI.test_posts_auth_get _______________________

self = <tests.test_post.TestPostAPI object at 0x000002320F0DF0A0>
user_client = <rest_framework.test.APIClient object at 0x000002320F030970>
post = <Post: Тестовый пост 1>, another_post = <Post: Тестовый пост 2>

    def test_posts_auth_get(self, user_client, post, another_post):
        response = user_client.get(self.post_list_url)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'`{self.post_list_url}` возвращает статус 200.'
        )
    
        test_data = response.json()
>       assert isinstance(test_data, list), (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'`{self.post_list_url}` возвращает список.'
        )
E       AssertionError: Проверьте, что GET-запрос авторизованного пользователя к `/api/v1/posts/` возвращает список.
E       assert False
E        +  where False = isinstance({'count': 2, 'next': None, 'previous': None, 'results': [{'author': 'TestUser', 'group': 31, 'id': 23, 'image': None, ...}, {'author': 'TestUserAnother', 'group': 32, 'id': 24, 'image': None, ...}]}, list)

tests\test_post.py:69: AssertionError
=========================== short test summary info ===========================
FAILED tests/test_comment.py::TestCommentAPI::test_comments_not_authenticated
FAILED tests/test_comment.py::TestCommentAPI::test_comment_single_not_authenticated
FAILED tests/test_comment.py::TestCommentAPI::test_comments_not_found - Asser...
FAILED tests/test_comment.py::TestCommentAPI::test_comments_id_available - As...
FAILED tests/test_comment.py::TestCommentAPI::test_comments_get - AssertionEr...
FAILED tests/test_comment.py::TestCommentAPI::test_comment_create_by_unauth
FAILED tests/test_comment.py::TestCommentAPI::test_comments_post_auth_with_valid_data
FAILED tests/test_comment.py::TestCommentAPI::test_comments_auth_post_with_invalid_data
FAILED tests/test_comment.py::TestCommentAPI::test_comment_author_and_post_are_read_only
FAILED tests/test_comment.py::TestCommentAPI::test_comment_id_auth_get - Asse...
FAILED tests/test_comment.py::TestCommentAPI::test_comment_change_by_auth_with_valid_data[put]
FAILED tests/test_comment.py::TestCommentAPI::test_comment_change_by_auth_with_valid_data[patch]
FAILED tests/test_comment.py::TestCommentAPI::test_comment_change_not_auth_with_valid_data[put]
FAILED tests/test_comment.py::TestCommentAPI::test_comment_change_not_auth_with_valid_data[patch]
FAILED tests/test_comment.py::TestCommentAPI::test_comment_delete_by_author
FAILED tests/test_comment.py::TestCommentAPI::test_comment_delete_by_not_author
FAILED tests/test_comment.py::TestCommentAPI::test_comment_delete_by_unauth
FAILED tests/test_follow.py::TestFollowAPI::test_follow_not_found - Assertion...
FAILED tests/test_follow.py::TestFollowAPI::test_follow_not_auth - AssertionE...
FAILED tests/test_follow.py::TestFollowAPI::test_follow_get - AssertionError:...
FAILED tests/test_follow.py::TestFollowAPI::test_follow_create - AssertionErr...
FAILED tests/test_follow.py::TestFollowAPI::test_follow_search_filter - Asser...
FAILED tests/test_post.py::TestPostAPI::test_posts_auth_get - AssertionError:...
======================= 23 failed, 32 passed in 15.60s ========================
